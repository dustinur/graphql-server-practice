/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Character: CharacterObject
      CharacterConnection: CharacterConnectionObject
      PageInfo: PageInfoObject
      CharacterEdge: CharacterEdgeObject
      AggregateCharacter: AggregateCharacterObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      CharacterSubscriptionPayload: CharacterSubscriptionPayloadObject
      CharacterPreviousValues: CharacterPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Character: CharacterFieldDetails
      CharacterConnection: CharacterConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      CharacterEdge: CharacterEdgeFieldDetails
      AggregateCharacter: AggregateCharacterFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      CharacterSubscriptionPayload: CharacterSubscriptionPayloadFieldDetails
      CharacterPreviousValues: CharacterPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      CharacterWhereUniqueInput: CharacterWhereUniqueInputInputObject
      CharacterWhereInput: CharacterWhereInputInputObject
      CharacterCreateInput: CharacterCreateInputInputObject
      CharacterUpdateInput: CharacterUpdateInputInputObject
      CharacterUpdateManyMutationInput: CharacterUpdateManyMutationInputInputObject
      CharacterSubscriptionWhereInput: CharacterSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    CharacterOrderByInput: CharacterOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'character', args?: QueryCharacterArgs[] | false, alias?: string  } 
  | { name: 'characters', args?: QueryCharactersArgs[] | false, alias?: string  } 
  | { name: 'charactersConnection', args?: QueryCharactersConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'character'
  | 'characters'
  | 'charactersConnection'


type QueryCharacterArgs =
  | 'where'
type QueryCharactersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCharactersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  character: {
    type: 'Character'
    args: Record<QueryCharacterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CharacterWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character | null> | prisma.Character | null
  }
  characters: {
    type: 'Character'
    args: Record<QueryCharactersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CharacterWhereInput | null, orderBy?: prisma.CharacterOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character[]> | prisma.Character[]
  }
  charactersConnection: {
    type: 'CharacterConnection'
    args: Record<QueryCharactersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CharacterWhereInput | null, orderBy?: prisma.CharacterOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CharacterConnection> | prisma.CharacterConnection
  }
}
  

// Types for Character

type CharacterObject =
  | CharacterFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'charClass', args?: [] | false, alias?: string  } 
  | { name: 'imageUrl', args?: [] | false, alias?: string  } 

type CharacterFields =
  | 'id'
  | 'name'
  | 'charClass'
  | 'imageUrl'



  

export interface CharacterFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  charClass: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imageUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for CharacterConnection

type CharacterConnectionObject =
  | CharacterConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CharacterConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CharacterConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CharacterConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CharacterEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CharacterConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CharacterEdge[]> | prisma.CharacterEdge[]
  }
  aggregate: {
    type: 'AggregateCharacter'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CharacterConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCharacter> | prisma.AggregateCharacter
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for CharacterEdge

type CharacterEdgeObject =
  | CharacterEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CharacterEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CharacterEdgeFieldDetails {
  node: {
    type: 'Character'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CharacterEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character> | prisma.Character
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCharacter

type AggregateCharacterObject =
  | AggregateCharacterFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCharacterFields =
  | 'count'



  

export interface AggregateCharacterFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createCharacter', args?: MutationCreateCharacterArgs[] | false, alias?: string  } 
  | { name: 'updateCharacter', args?: MutationUpdateCharacterArgs[] | false, alias?: string  } 
  | { name: 'updateManyCharacters', args?: MutationUpdateManyCharactersArgs[] | false, alias?: string  } 
  | { name: 'upsertCharacter', args?: MutationUpsertCharacterArgs[] | false, alias?: string  } 
  | { name: 'deleteCharacter', args?: MutationDeleteCharacterArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCharacters', args?: MutationDeleteManyCharactersArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createCharacter'
  | 'updateCharacter'
  | 'updateManyCharacters'
  | 'upsertCharacter'
  | 'deleteCharacter'
  | 'deleteManyCharacters'


type MutationCreateCharacterArgs =
  | 'data'
type MutationUpdateCharacterArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCharactersArgs =
  | 'data'
  | 'where'
type MutationUpsertCharacterArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCharacterArgs =
  | 'where'
type MutationDeleteManyCharactersArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createCharacter: {
    type: 'Character'
    args: Record<MutationCreateCharacterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CharacterCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character> | prisma.Character
  }
  updateCharacter: {
    type: 'Character'
    args: Record<MutationUpdateCharacterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CharacterUpdateInput, where: CharacterWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character | null> | prisma.Character | null
  }
  updateManyCharacters: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCharactersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CharacterUpdateManyMutationInput, where?: CharacterWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCharacter: {
    type: 'Character'
    args: Record<MutationUpsertCharacterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CharacterWhereUniqueInput, create: CharacterCreateInput, update: CharacterUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character> | prisma.Character
  }
  deleteCharacter: {
    type: 'Character'
    args: Record<MutationDeleteCharacterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CharacterWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character | null> | prisma.Character | null
  }
  deleteManyCharacters: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCharactersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CharacterWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'character', args?: SubscriptionCharacterArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'character'


type SubscriptionCharacterArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  character: {
    type: 'CharacterSubscriptionPayload'
    args: Record<SubscriptionCharacterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CharacterSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CharacterSubscriptionPayload | null> | prisma.CharacterSubscriptionPayload | null
  }
}
  

// Types for CharacterSubscriptionPayload

type CharacterSubscriptionPayloadObject =
  | CharacterSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CharacterSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CharacterSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CharacterSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Character'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CharacterSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character | null> | prisma.Character | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CharacterPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CharacterSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CharacterPreviousValues | null> | prisma.CharacterPreviousValues | null
  }
}
  

// Types for CharacterPreviousValues

type CharacterPreviousValuesObject =
  | CharacterPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'charClass', args?: [] | false, alias?: string  } 
  | { name: 'imageUrl', args?: [] | false, alias?: string  } 

type CharacterPreviousValuesFields =
  | 'id'
  | 'name'
  | 'charClass'
  | 'imageUrl'



  

export interface CharacterPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  charClass: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imageUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface CharacterWhereUniqueInput {
  id?: string | null
}
export type CharacterWhereUniqueInputInputObject =
  | Extract<keyof CharacterWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CharacterWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  charClass?: string | null
  charClass_not?: string | null
  charClass_in?: string[]
  charClass_not_in?: string[]
  charClass_lt?: string | null
  charClass_lte?: string | null
  charClass_gt?: string | null
  charClass_gte?: string | null
  charClass_contains?: string | null
  charClass_not_contains?: string | null
  charClass_starts_with?: string | null
  charClass_not_starts_with?: string | null
  charClass_ends_with?: string | null
  charClass_not_ends_with?: string | null
  imageUrl?: string | null
  imageUrl_not?: string | null
  imageUrl_in?: string[]
  imageUrl_not_in?: string[]
  imageUrl_lt?: string | null
  imageUrl_lte?: string | null
  imageUrl_gt?: string | null
  imageUrl_gte?: string | null
  imageUrl_contains?: string | null
  imageUrl_not_contains?: string | null
  imageUrl_starts_with?: string | null
  imageUrl_not_starts_with?: string | null
  imageUrl_ends_with?: string | null
  imageUrl_not_ends_with?: string | null
  AND?: CharacterWhereInput[]
  OR?: CharacterWhereInput[]
  NOT?: CharacterWhereInput[]
}
export type CharacterWhereInputInputObject =
  | Extract<keyof CharacterWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'charClass', alias?: string  } 
  | { name: 'charClass_not', alias?: string  } 
  | { name: 'charClass_in', alias?: string  } 
  | { name: 'charClass_not_in', alias?: string  } 
  | { name: 'charClass_lt', alias?: string  } 
  | { name: 'charClass_lte', alias?: string  } 
  | { name: 'charClass_gt', alias?: string  } 
  | { name: 'charClass_gte', alias?: string  } 
  | { name: 'charClass_contains', alias?: string  } 
  | { name: 'charClass_not_contains', alias?: string  } 
  | { name: 'charClass_starts_with', alias?: string  } 
  | { name: 'charClass_not_starts_with', alias?: string  } 
  | { name: 'charClass_ends_with', alias?: string  } 
  | { name: 'charClass_not_ends_with', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  | { name: 'imageUrl_not', alias?: string  } 
  | { name: 'imageUrl_in', alias?: string  } 
  | { name: 'imageUrl_not_in', alias?: string  } 
  | { name: 'imageUrl_lt', alias?: string  } 
  | { name: 'imageUrl_lte', alias?: string  } 
  | { name: 'imageUrl_gt', alias?: string  } 
  | { name: 'imageUrl_gte', alias?: string  } 
  | { name: 'imageUrl_contains', alias?: string  } 
  | { name: 'imageUrl_not_contains', alias?: string  } 
  | { name: 'imageUrl_starts_with', alias?: string  } 
  | { name: 'imageUrl_not_starts_with', alias?: string  } 
  | { name: 'imageUrl_ends_with', alias?: string  } 
  | { name: 'imageUrl_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CharacterCreateInput {
  name?: string
  charClass?: string
  imageUrl?: string | null
}
export type CharacterCreateInputInputObject =
  | Extract<keyof CharacterCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'charClass', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  
export interface CharacterUpdateInput {
  name?: string | null
  charClass?: string | null
  imageUrl?: string | null
}
export type CharacterUpdateInputInputObject =
  | Extract<keyof CharacterUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'charClass', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  
export interface CharacterUpdateManyMutationInput {
  name?: string | null
  charClass?: string | null
  imageUrl?: string | null
}
export type CharacterUpdateManyMutationInputInputObject =
  | Extract<keyof CharacterUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'charClass', alias?: string  } 
  | { name: 'imageUrl', alias?: string  } 
  
export interface CharacterSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CharacterWhereInput | null
  AND?: CharacterSubscriptionWhereInput[]
  OR?: CharacterSubscriptionWhereInput[]
  NOT?: CharacterSubscriptionWhereInput[]
}
export type CharacterSubscriptionWhereInputInputObject =
  | Extract<keyof CharacterSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type CharacterOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'charClass_ASC'
  | 'charClass_DESC'
  | 'imageUrl_ASC'
  | 'imageUrl_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  